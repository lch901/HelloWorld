/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-08-25 12:03:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<pre>\r\n");
      out.write(" \t멈춘 시간 속 잠든 너를 찾아가\r\n");
      out.write("\t아무리 막아도 결국 너의 곁인 걸\r\n");
      out.write("\t길고 긴 여행을 끝내 이젠 돌아가\r\n");
      out.write("\t너라는 집으로 지금 다시 way back home\r\n");
      out.write("\t아무리 힘껏 닫아도 다시 열린 서랍 같아\r\n");
      out.write("\t하늘로 높이 날린 넌 자꾸 내게 되돌아와\r\n");
      out.write("\t힘들게 삼킨 이별도 다 그대로인 걸 oh oh oh (oh oh oh)\r\n");
      out.write("\t수없이 떠난 길 위에서 난 너를 발견하고\r\n");
      out.write("\t비우려 했던 맘은 또 이렇게 너로 차올라\r\n");
      out.write("\t발걸음의 끝에 늘 니가 부딪혀\r\n");
      out.write("\t그만 그만\r\n");
      out.write("\t멈춘 시간 속 잠든 너를 찾아가\r\n");
      out.write("\t아무리 막아도 결국 너의 곁인 걸\r\n");
      out.write("\t길고 긴 여행을 끝내 이젠 돌아가\r\n");
      out.write("\t너라는 집으로 지금 다시 way back home\r\n");
      out.write("\t조용히 잠든 방을 열어 기억을 꺼내 들어\r\n");
      out.write("\t부서진 시간 위에서 선명히 너는 떠올라\r\n");
      out.write("\t길 잃은 맘 속에 널 가둔 채 살아\r\n");
      out.write("\t그만 그만\r\n");
      out.write("\t멈춘 시간 속 잠든 너를 찾아가\r\n");
      out.write("\t아무리 막아도 결국 너의 곁인 걸\r\n");
      out.write("\t길고 긴 여행을 끝내 이젠 돌아가\r\n");
      out.write("\t너라는 집으로 지금 다시 way back home\r\n");
      out.write("\t세상을 뒤집어 찾으려 해\r\n");
      out.write("\t오직 너로 완결된 이야기를\r\n");
      out.write("\t모든 걸 잃어도 난 너 하나면 돼\r\n");
      out.write("\t빛이 다 꺼진 여기 나를 안아줘\r\n");
      out.write("\t눈을 감으면 소리 없이 밀려와\r\n");
      out.write("\t이 마음 그 위로 넌 또 한 겹 쌓여가\r\n");
      out.write("\t내겐 그 누구도 아닌 니가 필요해\r\n");
      out.write("\t돌아와 내 곁에 그날까지 I'm not done\r\n");
      out.write("</pre>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
